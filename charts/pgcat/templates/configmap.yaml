apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "pgcat.fullname" . }}
  labels:
    {{- include "pgcat.fullname" . | nindent 4 }}
data:
  pgcat.toml: |
    [general]
    host = "{{ .Values.configuration.general.host }}"
    port = {{ .Values.configuration.general.port }}
    enable_prometheus_exporter = {{ .Values.configuration.general.enable_prometheus_exporter }}
    prometheus_exporter_port = {{ .Values.configuration.general.prometheus_exporter_port }}
    connect_timeout = {{ .Values.configuration.general.connect_timeout }}
    healthcheck_timeout = {{ .Values.configuration.general.healthcheck_timeout }}
    healthcheck_delay = {{ .Values.configuration.general.healthcheck_delay }}
    shutdown_timeout = {{ .Values.configuration.general.shutdown_timeout }}
    ban_time = {{ .Values.configuration.general.ban_time }}
    log_client_connections = {{ .Values.configuration.general.log_client_connections }}
    log_client_disconnections = {{ .Values.configuration.general.log_client_disconnections }}
    {{- if and (ne .Values.configuration.general.tls_certificate "-") (ne .Values.configuration.general.tls_private_key "-") }}
    tls_certificate = "{{ .Values.configuration.general.tls_certificate }}"
    tls_private_key = "{{ .Values.configuration.general.tls_private_key }}"
    {{- end }}
    admin_username = {{ .Values.configuration.general.admin_username }}
    admin_password = {{ .Values.configuration.general.admin_password }}

    [pools.postgres]
    pool_mode = {{ .Values.configuration.poolsPostgres.pool_mode }}
    default_role = {{ .Values.configuration.poolsPostgres.default_role }}
    query_parser_enabled = {{ .Values.configuration.poolsPostgres.query_parser_enabled }}
    query_parser_read_write_splitting = {{ .Values.configuration.poolsPostgres.query_parser_read_write_splitting }}
    primary_reads_enabled = {{ .Values.configuration.poolsPostgres.primary_reads_enabled }}
    sharding_function = {{ .Values.configuration.poolsPostgres.sharding_function }}
    {{- range $index, $user := .Values.configuration.poolsPostgres.users }}
    [pools.postgres.users.{{ $index }}]
    username = {{ $user.username }}
    password = {{ $user.password }}
    pool_size = {{ $user.pool_size }}
    statement_timeout = {{ $user.statement_timeout }}
    {{- end }}
    {{- range $index, $shard := .Values.configuration.poolsPostgres.shards }}
    [pools.postgres.shards.{{ $index }}]
    {{- if gt (len $shard.servers) 0}}
    servers = [
    {{- range  $server := $shard.servers }}
        [ {{ $server.host }}, {{ $server.port }}, {{ $server.role }} ],
    {{- end }}
    ]
    {{- end }}
    database = {{ $shard.database }}
    {{- end }}

